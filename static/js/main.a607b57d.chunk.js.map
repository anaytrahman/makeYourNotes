{"version":3,"sources":["shared/AlertButton.js","todos/ShowTodo.js","todos/AddTodos.js","App.js","reportWebVitals.js","index.js"],"names":["AlertButton","className","role","ShowTodo","todos","updateTodoHandler","deleteAllTodoHandler","deleteHandler","dltMsg","alertMsg","ColorRed","color","class","length","map","todo","index","title","onClick","style","AddTodo","getTodoLs","JSON","parse","localStorage","getItem","useState","setTodos","isUpdate","setIsUpdate","isValueChanged","setIsValueChanged","setIndex","succssMsg","setSuccessMsg","setAlertMsg","setDltMsg","isClickedUpdate","setIsClickedUpdate","emptyInput","setEmptyInput","titleRef","useRef","setTitle","useEffect","setItem","stringify","type","onSubmit","e","preventDefault","data","current","value","console","log","newTodos","slice","splice","setTimeout","TextField","inputRef","onKeyUp","target","id","size","updateTitle","indexId","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a607b57d.chunk.js","sourcesContent":["import CloseIcon from \"@material-ui/icons/Close\";\r\nconst AlertButton = () => {\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"mt-3 alert alert-danger alert-dismissible fade show\"\r\n        role=\"alert\"\r\n      >\r\n        <strong>Empty Todo! </strong> Please Enter Your text here.\r\n       \r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AlertButton;\r\n","import EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nconst ShowTodo = ({\r\n  todos,\r\n  deleteAllTodoHandler,\r\n  updateTodoHandler,\r\n  deleteHandler,\r\n  dltMsg,\r\n  alertMsg\r\n  \r\n}) => {\r\n  const ColorRed = {\r\n    color: \"red\",\r\n  };\r\n  return (\r\n    <>\r\n      {/*show todos*/}\r\n      <div>\r\n        {/* {todos && todos.length > 0 && (\r\n          <button onClick={deleteAllTodoHandler}> Delete All todo</button>\r\n        )} */}\r\n        \r\n        {dltMsg && (\r\n          <div class=\"alert-box alert alert-danger mt-2\" role=\"alert\">\r\n            {alertMsg}\r\n          </div>\r\n        )}\r\n      \r\n       \r\n        {!todos.length > 0 &&   (\r\n          <div className=\"alert alert-warning mt-5\" role=\"alert\">\r\n            There is no any Notes right now . Please Create your Todo.\r\n          </div>\r\n        )}\r\n        <div className=\"show-todo-wrapper\">\r\n          {todos &&\r\n            todos.length > 0 &&\r\n            todos.map((todo, index) => (\r\n              <div className=\"boxes\" key={index}>\r\n                {todo.title && (\r\n                  <div className=\"title-wrapper\">\r\n                    <ul>\r\n                      <li>{todo.title}</li>\r\n                    </ul>\r\n                  </div>\r\n                )}\r\n                {/* action wrapper */}\r\n                <div className=\"actions-wrapper\">\r\n                  <button onClick={() => updateTodoHandler(index, todo.title)}>\r\n                    <EditIcon style={({ ColorRed }, { color: \"blue\" })} />\r\n                  </button>\r\n                  <button onClick={() => deleteHandler(index, todo.title)}>\r\n                    <DeleteIcon style={ColorRed} />\r\n                  </button>\r\n                  <button>\r\n                    <DoneIcon />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShowTodo;\r\n","import AddBoxIcon from \"@material-ui/icons/AddBox\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport EditRoundedIcon from \"@material-ui/icons/EditRounded\";\r\nimport AlertButton from \"./../shared/AlertButton\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport ShowTodo from \"./ShowTodo\";\r\nimport { TextField } from \"@material-ui/core\";\r\nconst AddTodo = () => {\r\n  //getting todos from localstorage\r\n  const getTodoLs = JSON.parse(localStorage.getItem(\"todos\")) || [];\r\n  //storing todo in this state\r\n  const [todos, setTodos] = useState(getTodoLs);\r\n  //if update clicked chnage btn on condition\r\n  const [isUpdate, setIsUpdate] = useState(false);\r\n  //value change btn show hide\r\n  const [isValueChanged, setIsValueChanged] = useState(false);\r\n  //storing index for refrence current data\r\n  const [index, setIndex] = useState(0);\r\n  //\r\n  const [succssMsg, setSuccessMsg] = useState(false);\r\n  //msgs\r\n  const [alertMsg, setAlertMsg] = useState(\"\");\r\n  //delete msg alert\r\n  const [dltMsg, setDltMsg] = useState(false);\r\n  //for todo name refrence\r\n  //for close and update add\r\n  const [isClickedUpdate, setIsClickedUpdate] = useState(false);\r\n  ///// for empty input add alert\r\n  const [emptyInput, setEmptyInput] = useState(false);\r\n\r\n  // const [updateTitle, setUpdateTitle] = useState();\r\n  const titleRef = useRef(\"Asas\");\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  ///adding todos to storage on state change //updated //delated/ added\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  //submit todo to state and storing\r\n  const submitTodo = (e) => {\r\n    e.preventDefault();\r\n    const data = {\r\n      title: titleRef.current.value,\r\n    };\r\n    //checking if input value is valid\r\n    if (titleRef.current.value) {\r\n      //checking if clicked on update btn then update button will exacute here\r\n      if (isUpdate) {\r\n        console.log(\"myTodos1\");\r\n        const newTodos = todos.slice();\r\n        newTodos.splice(index, 1, data);\r\n        setTodos(newTodos);\r\n        //after update input value  will clear\r\n        titleRef.current.value = \"\";\r\n        //setUpdate button hide and add btn will show\r\n        setIsUpdate(false);\r\n      } else {\r\n        //after adding todo input will clear\r\n        titleRef.current.value = \"\";\r\n        //cloning old and adding new using spread oprator\r\n        setTodos([...todos, data]);\r\n        setAlertMsg(\"Todo Created!!\");\r\n        setSuccessMsg(true);\r\n        setTimeout(() => {\r\n          setSuccessMsg(false);\r\n        }, 1000);\r\n      }\r\n    } else {\r\n      setEmptyInput(true);\r\n      setTimeout(() => {\r\n        setEmptyInput(false);\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  //updating todo // edit todo// update method\r\n  //getting indexing , and title\r\n  const updateTodoHandler = (index, updateTitle) => {\r\n    setIsUpdate(true);\r\n    setIndex(index);\r\n    setTitle(updateTitle);\r\n    titleRef.current.value = updateTitle;\r\n    console.log(\"updateTitle \", updateTitle);\r\n    // setUpdateTitle(updateTitle);\r\n    setIsClickedUpdate(true);\r\n  };\r\n\r\n  //delete todos\r\n\r\n  const deleteHandler = (indexId, title) => {\r\n    setDltMsg(true);\r\n    setAlertMsg(\"todo Deleted!!!\");\r\n    setTimeout(() => {\r\n      setDltMsg(false);\r\n    }, 3000);\r\n    let newTodos = todos.slice();\r\n    newTodos.splice(indexId, 1);\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  ///delete all todos\r\n\r\n  const deleteAllTodoHandler = () => {\r\n    setTodos([]);\r\n  };\r\n  ///\r\n\r\n  const closeHandler = () => {\r\n    titleRef.current.value = \"\";\r\n    setIsClickedUpdate(false);\r\n    setIsUpdate(false);\r\n  };\r\n  return (\r\n    <>\r\n      {isUpdate ? <h1>Update todo </h1> : <h1>Add todos </h1>}\r\n      <div className=\"top-wrapper\">\r\n          <div className=\"darkMode-wrapper\">\r\n          <span>DarkMode</span>\r\n                  <input type=\"checkbox\"/>\r\n          </div>\r\n      </div>\r\n    \r\n      <div className=\"input-action\">\r\n        <form onSubmit={submitTodo}>\r\n          <div className=\"input-wrapper\">\r\n            <label>Enter Todo / Notes</label> <br />\r\n            <TextField\r\n              inputRef={titleRef}\r\n              onKeyUp={(e) => {\r\n                console.log(\"  e.target.value \", e.target.value);\r\n\r\n                if (isUpdate) {\r\n                  if (todos.length > 0) {\r\n                    // match with state title\r\n                    setIsClickedUpdate(false);\r\n                    e.target.value === todos[index].title\r\n                      ? setIsValueChanged(false)\r\n                      : setIsValueChanged(true);\r\n                  }\r\n                }\r\n              }}\r\n              id=\"standard-size-small \"\r\n              size=\"madium\"\r\n            />\r\n            {isClickedUpdate && (\r\n              <button type=\"button\" onClick={closeHandler}>\r\n                <CloseIcon style={{ color: \"red\" }} />\r\n              </button>\r\n            )}\r\n            {isUpdate && isClickedUpdate === false && isValueChanged ? (\r\n              <button type=\"submit\">\r\n                <EditRoundedIcon style={{ color: \"red\" }} />\r\n              </button>\r\n            ) : (\r\n              isClickedUpdate === false && (\r\n                <button type=\"submit\">\r\n                  <AddBoxIcon style={{ color: \"green\" }} />\r\n                </button>\r\n              )\r\n            )}\r\n          </div>\r\n        </form>\r\n      </div>\r\n      {emptyInput && <AlertButton />}\r\n      {succssMsg && (\r\n        <div className=\"alert-box alert alert-success\" role=\"alert\">\r\n          <p>{alertMsg}</p>\r\n        </div>\r\n      )}\r\n\r\n      <ShowTodo\r\n        todos={todos}\r\n        deleteAllTodoHandler={deleteAllTodoHandler}\r\n        updateTodoHandler={updateTodoHandler}\r\n        deleteHandler={deleteHandler}\r\n        dltMsg={dltMsg}\r\n        alertMsg={alertMsg}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddTodo;\r\n","\r\nimport './App.scss';\r\nimport AddTodo from \"./todos/AddTodos\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n     <AddTodo/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}